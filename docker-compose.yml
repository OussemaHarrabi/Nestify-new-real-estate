version: '3.8'

services:
  # PostgreSQL service for users
  postgres:
    image: postgres:15-alpine
    container_name: nestify-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-nestify_users}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - nestify-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB service for properties
  mongodb:
    image: mongo:6.0
    container_name: nestify-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-password}
      MONGO_INITDB_DATABASE: nestify
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./docker/mongodb/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - nestify-network

  # Nestify API service
  nestify-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: nestify-api
    restart: unless-stopped
    depends_on:
      - mongodb
      - postgres
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3000
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-password}@mongodb:27017/nestify?authSource=admin
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-nestify_users}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      JWT_SECRET: ${JWT_SECRET}
      JWT_ACCESS_EXPIRY: ${JWT_ACCESS_EXPIRY:-15m}
      JWT_REFRESH_EXPIRY: ${JWT_REFRESH_EXPIRY:-7d}
      BCRYPT_ROUNDS: ${BCRYPT_ROUNDS:-10}
      RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW:-60000}
      RATE_LIMIT_MAX: ${RATE_LIMIT_MAX:-100}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-http://localhost:3001}
      SWAGGER_ENABLED: ${SWAGGER_ENABLED:-true}
    ports:
      - "${API_PORT:-3000}:3000"
    volumes:
      - ./logs:/usr/src/app/logs
    networks:
      - nestify-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis service (for future caching)
  redis:
    image: redis:7-alpine
    container_name: nestify-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - nestify-network

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: nestify-nginx
    restart: unless-stopped
    depends_on:
      - nestify-api
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - nestify-network

networks:
  nestify-network:
    driver: bridge

volumes:
  mongodb_data:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local